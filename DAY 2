[1] Implement 2d array and rotate the matrix 90 degrees
[1 2
 3 4]
transpose the matrix first and then reverse every row by itself
00 01 01                 00 10 20                     20 10 00
10 11 12  (transpose)->  01 11 21 (reverse the row)-> 21 11 01
20 21 22                 02 12 22                     22 12 02
                          |  |  |
                          here only i changes when compared to reversed matrix...so if u wanna write a code then this is the logic
//////program:////////////////////
r=int(input())
c=int(input())
matrix=[]
for i in range(r):
    a=[]
    for i in range(c):
        x=int(input())
        a.append(x)
    matrix.append(a)
print("matrix")
for i in range(r):
    for j in range(c):
        print(matrix[i][j],end="")
    print()
print("clockwise")
for i in range(r):
    for j in range(c-1,-1,-1):
        print(matrix[j][i],end="")
    print()
print(" anti clockwise")
for i in range(r-1,-1,-1):
    for j in range(c):
        print(matrix[j][i],end="")
    print() 
output:
3
3
1
2
3
4
5
6
7
8
9
matrix
123
456
789
clockwise
741
852
963
 anti clockwise
369
258
147

||TIME COMPLEXITY:||||||||||||||||||
for(int i=1;i<n;i*2)
{  
    statement;
}
i=1   1 time
i=2   2 times=1*2
i=3   4 times=1*2*2=2^2
i=4   8 times= 1*2*2*2=2^3
when stops i>=n
           i=2^k>=n
           k>=logn base 2
           so o(log n base 2)
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
for(int i=0;i<n;i++)
{
statment
}
i        j
0        nothing
1        0 will execute 
         1 it will stop
         0,1 executes
2        0 will
         1 will
         2 stops
so when the loop stopes excuting .....when i 0 times
                                             1 1 time
                                             2 2 times
so 1+2+3+4+5.......n is n(n+1)/2
                        =(n^2+n)/2
                        =o(n^2)
1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
p=0
for(int i=0;i<ni++){
p=p+1;
}
0+1 bcs p=p+i when n=0
0+1+2=3 n=1
0+1+3+2=6 n=2
for n=k
0+1+2+3.....+k=k(k+1)/2
when will the loop end??
when n>p
so....p=k(k+1)/2
       =k^2+k/2
       =k^2>n
       k<root n
so     o(root n)
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
for(int i=0;i<n;i++)====o(n)
for(int i=0;i<n;i+2)====o(n)
for(int i=0;i<n;i--)====o(n)
for(int i=0;i<n;i=i*2)====o(log n base 2)
for(int i=0;i<n;i=i*3)====o(log n base 3)
for(int i=0;i<n;i=i/2)====o(log n base 2)
->constant time complexity...O(1)
->linear.....................O(n)
->logarithmic.................O(log n)
->quadratic...................O(n)
->exponential.................O(n^2)
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
for(int i=0;i<n;i/2){
s
}
1 
N
n/2
n/2 power k
......n/2 power k
O(log n base 2)

................................................................................
[2] create dynamic 1d array it should contain numbers between 10 to 30
a) extarct and print even numbers
b) 2 power values
Things needed to be kept in mind :
enter range 10 to 40
enter array size 8
enter elements
[10,11,15,16,17,20,32,39]
expected output :
even no.: 10,16,20,32
2 power : 16,32
//////////////////////program:///////////////////
#include<stdio.h>
#include<math.h>
int main() {
    // Write C code here
    int a[10],n,i,j;
    scanf("%d",&n);
    for(i=0;i<n;i++){
        scanf("%d",&a[i]);
        
    }
    for(i=0;i<n;i++){
        if(a[i]%2==0)
        printf("%d\t",a[i]);
    }printf("\n");
    for(i=0;i<n;i++){
        for(j=0;j<6;j++){
        if(pow(2,j)==a[i]){
        printf("%d\t",a[i]);
            
        }
    }}
    return 0;
}
output:
8
10 11 12 14 15 16 25 23
10      12      14      16
16
--------------------------------
Process exited after 28.46 seconds with return value 0
Press any key to continue . . .
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
3)sum of n natural numbers using fns
program:

#include<stdio.h>
int sum(int);
int main(){
	int n,s;
	scanf("%d",&n);
	s=sum(n);
	printf("%d",s);
	
	
}
int sum(int n){
	if(n==0)
	   return 0;
	return n+sum(n-1);
}
.........................................................
4)factorial using fn

#include<stdio.h>
int fact(int);
int main(){
	int f,n;
	scanf("%d",&n);
	f=fact(n);
	printf("%d",f);
	
}
int fact(int n){
	if(n==1)
	  return 1;
	return n*fact(n-1);
}
................................................................
5)fibinocci using fn

#include<stdio.h>
int fib(int);
int main(){
	int n,f;
	scanf("%d",&n);
	//a=fib(n);
	for(int i=0;i<n;i++){
	
	printf("%d",fib(i));
}
}
int fib(int n){
	if(n==0)
	  return 0;
	if(n==1)
	   return 1;
	else
	   return fib(n-1)+fib(n-2);
}
...................................................................
6)array sum

#include<stdio.h>
int sum(int[]);
int main(){
	int a[5],n,i;
	for(i=0;i<5;i++){
		scanf("%d",&a[i]);
	}
	n=sum(a);
	printf("%d",n);
}
int sum(int a[]){
	int s=0;
	for(int i=0;i<5;i++){
		s=s+a[i];
	}
	return s;
}
.................................................................................
7)linear search

#include<stdio.h>
int main(){
	int a[10],n,i,key;
	for(i=0;i<5;i++){
		scanf("%d",&a[i]);
	}
	scanf("%d",&key);

	for(i=0;i<5;i++){
		if(a[i]==key){
			printf("found");
		}
		
		
}
}
..........................................................
8)linear using fn

#include<stdio.h>
int fan(int a[],int key);
int main(){
	int a[10],n,i,key,flag;
	for(i=0;i<5;i++){
		scanf("%d",&a[i]);
	}
	scanf("%d",&key);
	flag=fan(a,key);
	if(flag==1)
	printf("yes");
	else
	printf("no");
}
int fan(int a[],int key){
	int flag;
	for(int i=0;i<5;i++){
		if(a[i]==key){
			return 1;
			break;
		}
}
}
..............................................................................




