def binary_search_ceil(arr,target):
    left,right=0,len(arr)-1
    
    while left<= right:
        mid=left+(right-left)//2
        if arr[mid]==target:
            return arr[mid]
        elif arr[mid]<target:
            left=mid+1
        else:
            ceil=arr[mid]
            right=mid-1
    return ceil
print(binary_search_ceil([1,2,3,9,8,12,13],7))
..............................................................................................................
'''u r given an array of N integers and another integer k.
input 5,1
1 1 1 2 3
3'''
n=list(map(int,input().split()))
arr=[1,1,1,2,3]
c=0
for i in arr:
    if i==n[1]:
        c=c+1
        
print(c)
(or)
n,k=list(map(int,input().split()))
arr=[1,1,1,2,3]
s,c=set(arr),0
for i in s:
    if arr.count(i)>=k:
        c=c+1
        
print(c)
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
def binary_seach_floor(arr,target):
    left,right=0,len(arr)-1
    floor=-1
    while left<= right:
        mid=left+(right-left)//2
        if arr[mid]==target:
            return arr[mid]
        elif arr[mid]<target:
            floor=arr[mid]
            left=mid+1
        else:
            right=mid-1
    return floor
print(binary_seach_floor([1,2,3,9,8,12,13],7))
...........................................................................................................
'''two pointer approach :(2 pointers in one loop)
problem:#1 (two sum problem)
arr[]={2,3,5,7,10,12,15,20},target=19
ans:4,6
explanation: retrun i and jth pointer whose sum of indexed value equals to target'''
def two_sum(arr, target):
    i, j = 0, len(arr) - 1

    while i < j:
        current_sum = arr[i] + arr[j]

        if current_sum == target:
            return i, j
        elif current_sum < target:
            i += 1
        else:
            j -= 1

    return "No pair found"

# Example usage
arr = [2, 3, 5, 7, 10, 12, 15, 20]
target = 19
result = two_sum(arr, target)

if isinstance(result, tuple):
    print("Indices:", result)
else:
    print(result)
...........................................................................................................
'''
1.
input:7564168
example:separate odd place integer:5 4 6
you have to return a 4 didgit otp by squaring the digits
digits from above ex: 5 4 6
squares:25,16,36
so otp to be retruned is first four digits:2516'''
'''n=input()
a=[]
for i in range(len(n)):
    if i%2!=0:
        a.append(n[i])
print(a)'''
'''or'''
n=input()
op=''
for i in range(1,len(n),2):
    op+=str(int(n[i])**2)
print(op[:4])
........................................................................................................
''' reverse the given string before and after the special character 
example:
input:srin#ivas
output:nirs#sav
input:we@lcome
ouput:ew@emocl'''
n=input()
words=n.split("@")
reversed_words = []

for word in words:
    reversed_word = ''.join(reversed(word))
    reversed_words.append(reversed_word)

print(reversed_words)

print(reversed_words[0]+'@'+reversed_words[1])
.................................................................................................................
'''special character '''
n=input()
for i in n:
    if not(i>='a' and i<='z'):
        print(n.index(i))
..........................................................................................................................
'''paranthesis_ai
n = input()
s = []
a,b,c=0,0,0
for i in n:
    if i == '(' or i == '{' or i == '[':
        s.append(i)
    elif i == ')' and (not s or s.pop() != '('):
        print("Unbalanced")
        
        break
    elif i == '}' and (not s or s.pop() != '{'):
        print("Unbalanced")
        
        break
    elif i == ']' and (not s or s.pop() != '['):
        print("Unbalanced")
        break

if not s:
    print("Balanced")
else:
    print("Unbalanced")
................................................................................................
''' reverse the given string and keeping its special character at the same place
example:
input:srin#ivas
output:sav#nirs
input:we@lcome
ouput:em@oclen'''
def demo(s):
    l=[]
    for i in s:
        if i.isalpha():
            l.append(i)
        else:
            spc=i
            idxspc=s.index(i)
    l.reverse()
    l.insert(idxspc,spc)
    return ''.join(l) #joins the list making it into string
s=input()
print(demo(s))
....................................................................................................
''' take a input from the user in the given format(consist of a name and code)
find the max digit from the code which is less or equal to the length of string and put that place char
in final string,if there is no any digit found which not satisfy the condition that simply put 'x'
#input
Abhishek:43848,mayur:3749,friend:3949,yeah:7878
#output:kuex'''
n=input()
s=n.split(',')
op=''
for i in s:
    nc=i.split(':')
    name=nc[0]
    code=nc[1]
    l=len(name)
    max=0
    for i in code:
        if int(i)>max and int(i)<=l:
            max=int(i)
    if max==0:
        op+='x'
    else:
        op+=name[max-1]
print(op)


































