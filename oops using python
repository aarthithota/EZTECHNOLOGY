                                                                                                                                                                                 30/9/23  
                                                                                                                                                                                    
 5 types of object datatypes:
data types r generally clses in python and variables r known as object(instances)
35 keywords..in python.....53 keywords in java
3 types of cls: normal class, abstract class, constructor
encapsulation: 
inside a cls we can iclude: (6) in java
1)member variables 2)constructor 3)static block 4) 5)enum 6)subcls
in python
1)number methods 2)enum 3)variable 4)
enum: combination of class
if need to declare a private varaibles in cls then add 2 underscores
x=10
__y=20(private varaible)

inheritance: using the properties of parents cls
functions r methods in java
class a {}
class b{}
if b had to inherite the properties of class a then write class b(a)
the methods of child cls is known to be derived cls/imaginary methods
x is a varible print(obj.x) is possible
abstarct is a keyword used in java
abc is a keyword used in python for abstract
java suports multiple inheritance only with the help of interface
in java, inside a cls we cant write a print statement
abstarction : hiding of information
cant create an obj for an abstarction
if need to create then polymorphism
class to method then use . that is this.a
methos level variable of arg type (self,x)
method level variable (self.x)
in java we use super keyword isame as in python but needed to be imported
if fn like def __init__: it is a default constructor
stack queue linked list trees and graphs and sorts and serached all disscused for memory allocation 
class A:
   x=10
   __y=30
   def s(self):
      print("add")
   def work(self,x):
      self.x=x
      print(x)
class B(A): 
   print("hii")
   
obj=B()
print(obj.x)
obj.s()
obj.work(50)
1)create a cls . which consists of 3 variables with intailization and we have to take 2 methods. the method is a 2 argumented fn, 1st one is string and second is integer and inside the method the string reverse value should be printed. i have to print sqaure  of int agrument value.
2nd method named display_result inside print lenght of string and print modulus of 2 integer cls level variable

//////////////////////////program////////////////////////////////////////
class A:
    a=input()
    b=int(input())
    c=int(input())
    def Method(self,a,b):
        print(a[::-1])
        print(b**2)
    def Display_result(self,a,b,c):
#self in python is this operator in java and while using this we should be writing self in method argumented
#self in the method needed because python doesnt have a datatype decalred beforehead so in order to know which type is which self needed to be kept
        print(len(a))
        print(b%c)
obj=A()
obj.Method(obj.a,obj.b)
obj.Display_result(obj.a,obj.b,obj.c)
output:
aarthi
5
10
ihtraa
25
6
5
........................................................................................
class A:
   a=10
   def s(self,a):
      print(a)
   def d(self):
      print(self.a)
obj=A()
print(obj.s(20))
   ...........................................................................................
#stack
l=[]
n=int(input("enter no.of ele:"))
for i in range(n):
    l.append(int(input()))
print(l)
for i in range(n):
    print(l.pop())
print(l)

output:

enter no.of ele:5
2
6
4
9
7
[2, 6, 4, 9, 7]
2
6
4
9
7
[]
...........................................................
#stack using imports
from collections import deque
l=deque()

n=int(input("enter no.of ele:"))
for i in range(n):
    l.append(int(input()))
print(l)
for i in range(n):
    print(l.pop())
print(l) 

.....................................................................
#queue
l=[]
n=int(input("enter no.of ele:"))
for i in range(n):
    l.append(int(input()))
print(l)
for i in range(n):
    print(l.pop(0))
print(l)

output:

enter no.of ele:5
1
2
3
4
5
[1, 2, 3, 4, 5]
1
2
3
4
5
[]
..........................................................................
#using imports
from collections import deque
l=deque()

n=int(input("enter no.of ele:"))
for i in range(n):
    l.append(int(input()))
print(l)
for i in range(n):
    print(l.popleft())
print(l)


   
